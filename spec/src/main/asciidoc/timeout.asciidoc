//
// Copyright (c) 2017 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// Emily Jiang

[[timeout]]
== Timeout
`Timeout` prevents from the execution from waiting forever.
It is recommended that a microservice invocation should have timeout associated with.

=== Timeout Usage

A method or a class can be annotated with `@Timeout`, which means the method or the methods under the class will have Timeout policy applied.

[source, java]
----
@Timeout(400) // timeout is 400ms
public Connection serviceA() {
   Connection conn = null;
   counterForInvokingServiceA++;
   conn = connectionService();
   return conn;
}
----

The above code-snippet means the method serviceA applies the `Timeout` policy,
which is to fail the execution if the execution takes more than 400ms to complete even if it successfully returns.

When a timeout occurs, A `TimeoutException` must be thrown.
The `Timeout` annotation can be used together with `Fallback`, `CircuitBreaker`, `Asynchronous`, `Bulkhead` and `Retry`.
A `Fallback` can be specified and it will be invoked if the `TimeoutException` is thrown.
If `Timeout` is used together with `Retry`, the `TimoutException` will trigger the retry.
When `Timeout` is used with `CircuitBreaker` and if a `TimeoutException` occurs, the failure will contribute towards the circuit open.
