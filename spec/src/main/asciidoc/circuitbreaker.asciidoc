//
// Copyright (c) 2016-2017 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// Emily Jiang

[[circuitbreaker]]
== Circuit Breaker

Circuit Breaker prevents repeating timeout, so that invoking dysfunctional services or APIs fail fast.
There are three circuit states:

* Closed: the service functions well.
If a failure occurs, the circuit breaker keeps the record.
After the specified failures are reached, the circuit will be opened.

* Open: calls to the circuit breaker fail immediately.
After the specified timeout is reached, the circuit transitions to half open state.

* Half-open: one call to the circuit is allowed.
If it fails, the circuit will remain open.
Otherwise, subsequent calls are allowed.
After the specified successful execution, the circuit will be closed.

=== Circuit Breaker Usage

A method or a class can be annotated with `@CircuitBreaker`, which means the method or the methods under the class will have CircuitBreaker policy applied.

[source, java]
----
@CircuitBreaker(successThreshold = 10, requestVolumeThreshold = 4, failureRatio=0.75, delay = 1000)
public Connection serviceA() {
   Connection conn = null;
   counterForInvokingServiceA++;
   conn = connectionService();
   return conn;
}
----

The above code-snippet means the method serviceA applies the `CircuitBreaker` policy,
which is to open the circuit once 3 (4x0.75) failures occur among the rolling window of 4 consecutive invocation.
The circuit will stay open for 1000ms and then back to half open.
After 10 consecutive successful invocations, the circuit will be back to close again.

When a circuit is open, A `CircuitBreakerOpenException` must be thrown.
The `CircuitBreaker` annotation can be used together with `Timeout`, `Fallback`, `Asynchronous`, `Bulkhead` and `Retry`.
A `fallback` can be specified and it will be invoked if the `CircuitBreakerOpenException` is thrown.
`Timeout` can be configured to fail an operation if it takes longer than the `Timeout` value to complete.
